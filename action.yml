name: 'GdUnit4 - Test Runner'
description: 'This is a GitHub action workflow for running GdUnit4 unit tests in Godot 4.x'
author: Mike Schulze <mikeschulze.lpz@kabelmail.de>

inputs:
  godot-version:
    description: 'The version of Godot in which the tests should be run.'
    required: true
    type: string
  godot-status:
    description: 'The Godot status (e.g., "standard", "rc1", "dev1")'
    required: true
    type: string
  godot-net:
    description: 'Set to true for Godot .Net (C#).'
    required: false
    type: bool
    default: false
  gdunit-version:
    description: 'The version of GdUnit4 to use. (e.g. "v4.2.0", "latest", "master").'
    required: false
    type: string
    default: master
  gdunit-tests:
    description: 'The path to the directory containing test to execute.'
    required: true
    type: string
  report-name:
    description: 'The name of the test report file.'
    required: false
    type: string
    default: 'test-report.xml'

outputs:
  artifactsPath:
    description: 'Path where the test artifacts are stored.'

branding:
  icon: 'refresh-cw'
  color: 'purple'

runs:
  using: 'composite'
  steps:
    - name: 'Update Ubuntu'
      if: ${{ !cancelled() }}
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get -y install systemd-coredump
        sudo apt update
        sudo apt -y install systemd-coredump

    - name: 'Install Godot ${{ inputs.godot-version }}'
      uses: ./.github/actions/godot-install
      with:
        godot-version: ${{ inputs.godot-version }}
        godot-net: ${{ inputs.godot-net }}
        godot-status-version: ${{ inputs.godot-status }}
        godot-cache-path: '~/godot-linux'

    - name: 'Setup .NET'
      if:  ${{ inputs.godot-net == 'true' }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 7.0.x

    - name: 'Install gdUnit4 plugin'
      shell: bash
      run: |
          git clone --branch ${{ inputs.gdunit-version }} --single-branch https://github.com/MikeSchulze/gdUnit4 install-gdunit4
          mv ./install-gdunit4/addons/ ./addons/
          rm -rf ./addons/gdUnit4/test

    - name: 'Update Project'
      if: ${{ !cancelled() }}
      shell: bash
      run: |
        if ${{ inputs.godot-net == 'true' }}; then
          dotnet restore
          dotnet build
        fi
        xvfb-run --auto-servernum ~/godot-linux/godot -e --path . -s res://addons/gdUnit4/bin/ProjectScanner.gd --headless --audio-driver Dummy 2> /dev/null

    - name: 'Run Unit Tests'
      if: ${{ !cancelled() }}
      uses: ./.github/actions/unit-test
      with:
        godot-bin: '~/godot-linux/godot'
        test-includes: ${{ inputs.gdunit-tests }}

    - name: 'Coredump Check'
      if: ${{ !cancelled() && inputs.godot-net == 'true' }}
      uses: ./.github/actions/check-coredump
      with:
        artifact-name: 'TestRunner-${{ inputs.os }}-${{ inputs.godot-version }}-mono'

    - name: 'Publish Unit Test Reports'
      if: ${{ !cancelled() }}
      uses: ./.github/actions/publish-test-report
      with:
        report-name: ${{ inputs.report-name }}

    - name: 'Upload Unit Test Reports'
      if: ${{ !cancelled() }}
      uses: ./.github/actions/upload-test-report
      with:
        report-name: ${{ inputs.report-name }}

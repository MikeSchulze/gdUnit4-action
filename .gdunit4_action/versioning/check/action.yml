name: 'Verify GdUnit4 Version Compatibility'
description: 'Verifies that the Godot and GdUnit4 version combination is compatible'

inputs:
  godot-version:
    description: 'The Godot version'
    required: true
  gdunit-version:
    description: 'The GdUnit4 version'
    required: true

runs:
  using: 'composite'
  steps:
    - name: 'Check Compatibility'
      shell: bash
      run: |
        GODOT_VERSION="${{ inputs.godot-version }}"
        GDUNIT_VERSION="${{ inputs.gdunit-version }}"
        
        echo -e "\e[34m========================================\e[0m"
        echo -e "\e[34mGdUnit4 Version Compatibility Check\e[0m"
        echo -e "\e[34m========================================\e[0m"
        echo -e "\e[33mGodot Version:\e[0m ${GODOT_VERSION}"
        echo -e "\e[33mGdUnit4 Version:\e[0m ${GDUNIT_VERSION}"
        echo ""
        
        # Load compatibility matrix
        COMPATIBILITY_FILE="./.gdunit4_action/versioning/check/compatibility_matrix.json"
        
        if [[ ! -f "${COMPATIBILITY_FILE}" ]]; then
          echo -e "\e[31m✗ Error: Compatibility matrix file not found\e[0m"
          exit 1
        fi
        
        # Normalize versions - remove 'v' prefix
        GODOT_VER=${GODOT_VERSION#v}
        GDUNIT_VER=${GDUNIT_VERSION#v}
        
        # Function to compare version numbers (returns 0 if $1 >= $2)
        version_ge() {
          printf '%s\n%s\n' "$2" "$1" | sort -V -C
          return $?
        }
        
        # Function to compare version numbers (returns 0 if $1 <= $2)
        version_le() {
          printf '%s\n%s\n' "$1" "$2" | sort -V -C
          return $?
        }
        
        echo -e "\e[34mChecking compatibility...\e[0m"
        echo ""
        
        # Find matching GdUnit4 version in matrix        
        ALL_VERSIONS=$(grep -oP '^\s*"\K[0-9]+\.[0-9]+\.[0-9]+(?=":)' "${COMPATIBILITY_FILE}" | sort -V -r)
        
        # Find the closest version that is <= GDUNIT_VER
        for ver in $ALL_VERSIONS; do
          if version_le "$ver" "$GDUNIT_VER"; then
            echo -e "\e[92m✓ Using compatibility rules for GdUnit4 v${ver}\e[0m"
            GODOT_MIN=$(grep -A 1 "\"${ver}\":" "${COMPATIBILITY_FILE}" | grep "godot_min" | cut -d'"' -f4)
            break
          fi
        done
        
        # If still no match found, use default
        if [[ -z "$GODOT_MIN" ]]; then
          echo -e "\e[33m⚠️  No specific version found, using default compatibility rules\e[0m"
          GODOT_MIN=$(grep -A 1 "\"default\":" "${COMPATIBILITY_FILE}" | grep "godot_min" | cut -d'"' -f4)
        fi
        
        echo ""
        
        # Check if Godot version meets the minimum requirement        
        if version_ge "$GODOT_VER" "$GODOT_MIN"; then
          echo -e "\e[92m✓ Version combination is compatible!\e[0m"
          echo -e "\e[92m  Godot v${GODOT_VER} >= v${GODOT_MIN} ✓\e[0m"
          echo -e "\e[34m========================================\e[0m"
          exit 0
        else
          echo -e "\e[31m✗ Incompatible version combination!\e[0m"
          echo -e "\e[31m  GdUnit4 v${GDUNIT_VER} requires at least Godot v${GODOT_MIN}\e[0m"
          echo -e "\e[31m  But you are using Godot v${GODOT_VER}\e[0m"
          echo ""
          REFERENCE=$(grep -oP '"reference":\s*"\K[^"]+' "${COMPATIBILITY_FILE}")
          echo -e "\e[33mPlease check the compatibility matrix at:\e[0m"
          echo -e "\e[34m${REFERENCE}\e[0m"
          echo -e "\e[34m========================================\e[0m"
          exit 1
        fi
